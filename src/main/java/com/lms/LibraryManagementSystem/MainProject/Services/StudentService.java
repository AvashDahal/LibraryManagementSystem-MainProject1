package com.lms.LibraryManagementSystem.MainProject.Services;

import com.lms.LibraryManagementSystem.MainProject.Dtos.StudentDto;
import com.lms.LibraryManagementSystem.MainProject.entity.Book;
import com.lms.LibraryManagementSystem.MainProject.entity.Student;
import com.lms.LibraryManagementSystem.MainProject.repositories.BooksRepository;
import com.lms.LibraryManagementSystem.MainProject.repositories.StudentRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

@Service
public class StudentService
{
    @Autowired
    private StudentRepository studentRepository;
    @Autowired
    private BooksRepository booksRepository;


    public void createStudent(StudentDto studentDto)
    {
        Student student = new Student();
        student.setFirst_name(studentDto.getFirstName());
        student.setMid_name(studentDto.getMidName());
        student.setLast_name(studentDto.getLastName());
       // student.setStudentId(student.getStudentId()); Because autogenerated bhaisakyo ani unique studentId will be stored in database
        student.setPhone_no(studentDto.getPhoneNo());
       student.setEmail(studentDto.getEmail());
        student.setAddress(studentDto.getAddress());
        student.setDob(studentDto.getDob());

         studentRepository.save(student);

    }
    public List<StudentDto> getAllStudents()
    {
        List<Student> students= studentRepository.findAll();
      List<StudentDto> studentDtos = new ArrayList<>();
        for (Student student :students)
        {
            StudentDto studentDto= new StudentDto();
            studentDto.setStudentId(student.getStudentId());
            studentDto.setFirstName(student.getFirst_name());
            studentDto.setMidName(student.getMid_name());
            studentDto.setLastName(student.getLast_name());
            studentDto.setPhoneNo(student.getPhone_no());
            studentDto.setEmail(student.getEmail());
            studentDto.setAddress(student.getAddress());
            studentDto.setDob(student.getDob());
            studentDtos.add(studentDto);
        }
        return studentDtos;


    }
    public StudentDto getStudentById(int studentId)
    {
        Optional<Student>student= studentRepository.findById(studentId);
        if(student.isPresent())
        {
            StudentDto studentDto= new StudentDto();
            studentDto.setStudentId(student.get().getStudentId());
            studentDto.setFirstName(student.get().getFirst_name());
            studentDto.setMidName(student.get().getMid_name());
            studentDto.setEmail(student.get().getEmail());
            studentDto.setPhoneNo(String.valueOf(student.get().getPhone_no()));
            studentDto.setAddress(student.get().getAddress());
            studentDto.setDob(student.get().getDob());
            return studentDto;

        }
        throw new RuntimeException("The "+ studentId +"is not found");
    }
    public StudentDto updateStudentById(int studentId, StudentDto updatedStudentDto)
    {
        Optional<Student >optionalStudent= studentRepository.findById(studentId);
        if(optionalStudent.isPresent())
        {
            Student student = optionalStudent.get();
            student.setFirst_name(updatedStudentDto.getFirstName());
            student.setMid_name(updatedStudentDto.getMidName());
            student.setLast_name(updatedStudentDto.getLastName());
            student.setEmail(updatedStudentDto.getEmail());
            student.setDob(updatedStudentDto.getDob());
            student.setPhone_no(updatedStudentDto.getPhoneNo());
            student.setAddress(updatedStudentDto.getAddress());
            studentRepository.save(student);
            StudentDto updatedStudentDtoResponse= new StudentDto();
            updatedStudentDtoResponse.setFirstName(student.getFirst_name());
            updatedStudentDtoResponse.setMidName(student.getMid_name());
            updatedStudentDtoResponse.setLastName(student.getLast_name());
            updatedStudentDtoResponse.setEmail(student.getEmail());
            updatedStudentDtoResponse.setDob(student.getDob());
            updatedStudentDtoResponse.setPhoneNo(student.getPhone_no());
            updatedStudentDtoResponse.setAddress(updatedStudentDto.getAddress());
            return updatedStudentDtoResponse;

        }
        else
        {
            throw new RuntimeException("The " + studentId + "is not found");
        }
    }

    public void deleteStudentById(int id) {
        Optional<Student> optionalStudent = studentRepository.findById(id);

        if (optionalStudent.isPresent()) {
            Student student = optionalStudent.get();
            studentRepository.delete(student);
        } else {
            throw new RuntimeException("The " + id + "is not found");
        }

    }

    @Transactional
    public void borrowBook(int studentId, int bookId)
    {
        Optional<Student> optionalStudent = studentRepository.findById(studentId);
        if (optionalStudent.isPresent())
        {
            Student student = optionalStudent.get();
            Optional<Book> optionalBook = booksRepository.findById(bookId);
            if (optionalBook.isPresent())
            {
                Book book = optionalBook.get();
                if(book.getStudent()!=null)
                {
                    throw new RuntimeException("The book is already borrowed by another student");
                }
                book.setStudent(student);
                student.getBorrowedBooks().add(book);
                studentRepository.save(student);



            }
            else {
                throw new RuntimeException("The book of "+ bookId+"is not found");
            }

        }
        else {
            throw new RuntimeException("The student of "+studentId+"is not found");
        }
    }

    public Set<Book> getBorrowedBooks(int student_id)
    {
        Optional<Student>optionalStudent= studentRepository.findById(student_id);
        if (optionalStudent.isPresent())
        {
            Student student = optionalStudent.get();

            return student.getBorrowedBooks();
        }
        else
        {
            throw new RuntimeException("The student of "+student_id+"is not found");
        }
    }






}
